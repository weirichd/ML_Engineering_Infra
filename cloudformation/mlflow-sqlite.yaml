AWSTemplateFormatVersion: '2010-09-09'
Description: MLflow on EC2 with SQLite backend and S3 artifact store, Nginx, basic auth, and SSM.

Parameters:
  Env:
    Type: String
    Default: prod
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair name for SSH
  SSHCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR allowed to SSH to EC2 (e.g., your.ip.addr/32)
  DockerImage:
    Type: String
    Default: ghcr.io/OWNER/mlflow-server:latest
    Description: MLflow server image (GHCR path)
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC for the EC2 instance and security group (use your default VPC)
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet in that VPC (use a default subnet)
  UbuntuAmiId:
    Type: String
    Description: Ubuntu 22.04 AMI ID (resolved by CI/script)

Resources:
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "mlflow-artifacts-${Env}-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration: { Status: Enabled }
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: { SSEAlgorithm: AES256 }
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLS
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "${ArtifactBucket.Arn}"
              - !Sub "${ArtifactBucket.Arn}/*"
            Condition:
              Bool:
                aws:SecureTransport: false

  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MLflow EC2 SG
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 22,  ToPort: 22,  CidrIp: !Ref SSHCidr }
        - { IpProtocol: tcp, FromPort: 80,  ToPort: 80,  CidrIp: 0.0.0.0/0 }

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: MlflowS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub "${ArtifactBucket.Arn}"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "${ArtifactBucket.Arn}/*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [ !Ref InstanceRole ]

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref UbuntuAmiId
      InstanceType: t3.small
      SubnetId: !Ref SubnetId
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroupIds: [ !Ref EC2SG ]
      UserData:
        Fn::Base64:
          !Sub
            - |
              #!/bin/bash
              set -eux
              export DEBIAN_FRONTEND=noninteractive

              apt-get update
              apt-get install -y docker.io nginx sqlite3 snapd
              # Enable SSM agent for no-SSH troubleshooting / commands
              snap install amazon-ssm-agent --classic
              systemctl enable --now snap.amazon-ssm-agent.amazon-ssm-agent.service || systemctl enable --now amazon-ssm-agent || true

              systemctl enable --now docker

              # Nginx reverse proxy to MLflow on :5000
              cat >/etc/nginx/sites-available/default <<'NG'
              server {
                listen 80 default_server;
                listen [::]:80 default_server;
                server_name _;
                location / {
                  proxy_pass http://127.0.0.1:5000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto http;
                  proxy_read_timeout 600;
                }
              }
              NG
              systemctl restart nginx

              # SQLite DB (tracking) + WAL + host perms for container UID 1000
              mkdir -p /var/lib/mlflow/db
              sqlite3 /var/lib/mlflow/db/mlflow.db "PRAGMA journal_mode=WAL; PRAGMA synchronous=NORMAL;"
              chown -R 1000:1000 /var/lib/mlflow/db

              # Auth config + secret (persisted on host; mounted into container)
              mkdir -p /var/lib/mlflow/auth
              cat >/var/lib/mlflow/auth/basic_auth.ini <<'INI'
              [mlflow]
              database_uri = sqlite:////mlflow_auth/basic_auth.db
              default_permission = READ
              admin_username = admin
              admin_password = password1234
              INI
              chmod 0644 /var/lib/mlflow/auth/basic_auth.ini
              chown -R 1000:1000 /var/lib/mlflow/auth

              install -d -m 0755 /etc/mlflow
              SECRET=$(head -c 32 /dev/urandom | base64)
              cat >/etc/mlflow/env <<EOF
              BACKEND_STORE_URI=sqlite:////mlflow_db/mlflow.db?check_same_thread=false
              DEFAULT_ARTIFACT_ROOT=s3://${ArtifactBucket}/mlruns
              MLFLOW_FLASK_SERVER_SECRET_KEY=$SECRET
              MLFLOW_AUTH_CONFIG_PATH=/mlflow_auth/basic_auth.ini
              EOF
              chmod 0644 /etc/mlflow/env
              chown -R 1000:1000 /var/lib/mlflow/auth

              # systemd unit for MLflow
              cat >/etc/systemd/system/mlflow.service <<'UNIT'
              [Unit]
              Description=MLflow Server (Docker, SQLite)
              After=network-online.target docker.service
              Wants=network-online.target
              Requires=docker.service

              [Service]
              Restart=always
              RestartSec=5
              EnvironmentFile=/etc/mlflow/env
              ExecStartPre=/usr/bin/docker pull ${DockerImage}
              ExecStart=/usr/bin/docker run --rm --name mlflow \
                -p 5000:5000 \
                -v /var/lib/mlflow/db:/mlflow_db \
                -v /var/lib/mlflow/auth:/mlflow_auth \
                ${DockerImage}
              ExecStop=/usr/bin/docker stop mlflow

              [Install]
              WantedBy=multi-user.target
              UNIT

              systemctl daemon-reload
              systemctl enable --now mlflow
            - { ArtifactBucket: !Ref ArtifactBucket, DockerImage: !Ref DockerImage }
      Tags:
        - { Key: Name, Value: !Sub "mlflow-ec2-${Env}" }

Outputs:
  ArtifactBucketName:
    Value: !Ref ArtifactBucket
  EC2PublicIP:
    Value: !GetAtt EC2Instance.PublicIp
  MLflowURL:
    Value: !Sub "http://${EC2Instance.PublicIp}"

